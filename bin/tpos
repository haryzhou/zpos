#!/usr/bin/perl
use strict;
use warnings;
use Carp;
use POE;
use POE::Wheel::ReadWrite;
use POE::Wheel::ReadLine;
use POE::Filter::Block;
use POE::Filter::HTTP::Parser;
use IO::Socket::INET;
use Zeta::Codec::Frame qw/ascii_n/;

# 读指定NACD的配置文件: host/port
my $ncfg = do "$ENV{ZPOS_HOME}/conf/nacd/head.conf";
confess "can not load cardsv.conf error[$@]" if $@;
my $nhost  = $ncfg->{host};
my $nport  = $ncfg->{port};

# 过滤器
my $filter = 'POE::Filter::Block'; 
my $fargs  = [ LengthCodec => binary_n(2) ];

# 渠道模拟配置: pack/unpack/debug_req/debug_res
my $simu = do "$ENV{ZPOS_HOME}/conf/tpos.simu";
die "can not do file[tpos.simu] error[$@]" if $@;

# 测试数据
my %req;
for my $file (<$ENV{ZPOS_HOME}/conf/tpos/*.req>) {
    $file =~ /([^\/]+).req$/;
    my $name = $1;
    $req{$name} =  do $file; 
}
my @tcode = keys %req;

# session
POE::Session->create(
    inline_states => {
        # 启动
        _start => sub {
            $_[HEAP]{console} = POE::Wheel::ReadLine->new(InputEvent => 'on_select');    
            $_[KERNEL]->yield('on_menu');
        },

        # 菜单
        on_menu => sub {
            $_[HEAP]{console}->put("----------------------");
            $_[HEAP]{console}->put("请选择测试交易");
            $_[HEAP]{console}->put("----------------------");
            $_[HEAP]{console}->put(join("\n", @tcode));
            $_[HEAP]{console}->put("----------------------");
            $_[HEAP]{console}->put("clear  : 清空控制台");
            $_[HEAP]{console}->put("exit   : 退出");
            $_[HEAP]{console}->get("请输入: ");
        },

        # 清理控制台
        on_clear => sub {
            $_[HEAP]{console}->clear();
            $_[KERNEL]->yield('on_menu');
        },

        # 退出
        on_exit => sub {
            delete $_[HEAP]{console};
            exit 0;
        },

        # 选择菜单
        on_select => sub {

            my $input = $_[ARG0];
            # 清理控制台
            if ($input =~ /clear/) {
                $_[KERNEL]->yield('on_clear');
                return 1;
            }
            # 退出
            elsif($input =~ /exit/) {
                $_[KERNEL]->yield('on_exit');
                return 1;
            }
            # 
            unless( exists $req{$input}) {
                $_[HEAP]{console}->put("交易[$input]数据不存在");
                $_[KERNEL]->yield('on_menu');
                return 1;
            }
            $_[HEAP]{console}->put("\n\n******************************");
            $_[HEAP]{console}->put("          测试交易$input");
            $_[HEAP]{console}->put("n******************************");
            $_[HEAP]{console}->put("1> test $input...");
            $_[HEAP]{console}->put("2> connect to $nhost:$nport...");
            my $nsock = IO::Socket::INET->new(
                 PeerAddr => $nhost,
                 PeerPort => $nport,
            );
            my $nw = POE::Wheel::ReadWrite->new(
                Handle     => $nsock,
                InputEvent => 'on_response',
                Filter     => $filter->new(@$fargs),
            );
            $_[HEAP]{nw} = $nw;
            warn "3> send>>>>>>>>:\n" . $simu->{debug_req}->($req{$input});
            $nw->put($simu->{pack}->($req{$input}));
            $req{$input} =  do "$ENV{ZPOS_HOME}/conf/tpos/$input.req";
        },

        on_response => sub {
            warn "4> recv<<<<<<<<:\n" . $simu->{debug_res}->($simu->{unpack}->($_[ARG0]));
            warn "5> 完成!!!\n\n";
            $_[KERNEL]->yield('on_menu');
        },
    },
);

$poe_kernel->run();
exit 0;

