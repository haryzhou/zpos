#!/usr/bin/perl
use strict;
use warnings;
use Zeta::Serializer::JSON;
use Carp;
use IO::Socket::INET;
use Zeta::Run;
use DBI;
use Carp;
use Zeta::IPC::MsgQ;
use Net::Stomp;
use Zeta::Pack::8583;


#
# 加载nacd配置
#
my $nacd = do "$ENV{ZPOS_HOME}/conf/nacd.conf";
confess "can not do file[nacd.conf] error[$@]" if $@;

#
# 返回值
#
my $cfg = {

    # 联机数据库配置 
    dbonl => {
        dsn    => "dbi:DB2:$ENV{DB_NAME}",
        user   => "$ENV{DB_USER}",
        pass   => "$ENV{DB_PASS}",
        schema => "$ENV{DB_SCHEMA}",
    },

    # 后线数据库配置
    dbbke => {
        dsn    => "dbi:DB2:$ENV{DB_NAME_BKE}",
        user   => "$ENV{DB_USER_BKE}",
        pass   => "$ENV{DB_PASS_BKE}",
        schema => "$ENV{DB_SCHEMA_BKE}",
    },

    # 数据库操作, zsetup添加-子进程prepare sth
    dbo => undef,
    dbh => undef,

    # 监控队列
    monq  => zkernel->logger_monq(),

    # 监控服务器配置
    msvr  => {
        host  => '127.0.0.1',
        port  => 7896,
        codec => 'ascii 4',
    },

    # stomp消息队列
    stomp => {
        host  => '127.0.0.1',
        port  => '61616',
    },

    # 后线交易备份消息队列 
    backend => '/queue/zpos.backend',

    # 序列化
    serializer => Zeta::Serializer::JSON->new(),

    # 通讯
    nacd => $nacd,

    # 加密机
    hsm => ZPOS::HSM->new( 
        host => '127.0.0.1',
        port => 6666
    ),

    # 交易对象
    tran => ZPOS::Tran->new(),

    # 打解包pos
    pack => Zeta::Pack::8583->new( conf => "$ENV{ZPOS_HOME}/conf/8583.conf"),

    # 打解包zero
    zpack => Zeta::Pack::JSON->new();
};

#
# 获取应用配置
#
helper zconfig => sub { $cfg };

#
# 连接数据库
#
helper dbh  => sub {
    my $cfg = zkernel->zconfig();
    my $dbh = DBI->connect(
        @{$cfg->{dbonl}}{qw/dsn user pass/},
        {
            RaiseError       => 1,
            PrintError       => 0,
            AutoCommit       => 0,
            FetchHashKeyName => 'NAME_lc',
            ChopBlanks       => 1,
            InactiveDestroy  => 1,
        }
    );
    unless($dbh) {
        zlogger->error("can not connet db[@{$cfg->{dbonl}}{qw/dsn user pass/}], quit");
        exit 0;
    }

    # 设置默认schema
    $dbh->do("set current schema $cfg->{dbonl}{schema}")
        or confess "can not set current schema $cfg->{db}{schema}";
    return $dbh;
};

#
# 连接后线库
#
helper dbh_bke => sub {
    my $cfg = zkernel->zconfig();
    my $dbh = DBI->connect(
        @{$cfg->{dbbke}}{qw/dsn user pass/},
        {
            RaiseError       => 1,
            PrintError       => 0,
            AutoCommit       => 0,
            FetchHashKeyName => 'NAME_lc',
            ChopBlanks       => 1,
            InactiveDestroy  => 1,
        }
    );
    unless($dbh) {
        zlogger->error("can not connet db[@{$cfg->{dbbke}}{qw/dsn user pass/}], quit");
        exit 0;
    }

    # 设置默认schema
    $dbh->do("set current schema $cfg->{dbbke}{schema}")
        or confess "can not set current schema $cfg->{dbbke}{schema}";
    return $dbh;
};


#
# 连接stomp
#
helper zstomp => sub {
    my $cfg = shift->zconfig();
    # 连接stomp
    my $stp = Net::Stomp->new({
        hostname => $cfg->{stomp}{host},
        port     => $cfg->{stomp}{port} ,
    }) or confess <<EOF;
Net::Stomp failed with 
    { 
        hostname => $cfg->{stomp}{host}, 
        port     => $cfg->{stomp}{port} 
}
EOF
    $stp->connect({ login => 'hello', passcode => 'there' });
    return $stp;
};


#
# 子进程zsetup: 
# 1> 连接数据库
# 2> 子进程的sql statement
#
helper zsetup => sub {
    my $zcfg = zkernel->zconfig();
    $zcfg->{dbh}    = zkernel->dbh();
    $zcfg->{stomp}  = zkernel->zstomp();
    return $zcfg;
};

$cfg;

__END__

dev vs configuration

